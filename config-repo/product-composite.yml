server.port: 7000

# Spring doc with swagger ui and openapi
springdoc:
    swagger-ui.path: /openapi/swagger-ui.html
    api-docs.path: /openapi/v3/api-docs
    packages-to-scan: com.rufusy.microservices.composite.product
    paths-to-match: /**
    cache.disabled: true
    swagger-ui:
        oauth2-redirect-url: /swagger-ui/oauth2-redirect.html
        oauth:
            clientId: writer
            clientSecret: secret-writer
            useBasicAuthenticationWithAccessCodeGrant: true
    oAuthFlow:
        authorizationUrl: https://localhost:8443/oauth2/authorize
        tokenUrl: https://localhost:8443/oauth2/token

api:
    common:
        version: 1.0.0
        title: Sample API
        description: Description of the API...
        termsOfService: MY TERMS OF SERVICE
        license: MY LICENSE
        licenseUrl: MY LICENSE URL
        externalDocDesc: MY WIKI PAGE
        externalDocUrl: MY WIKI URL
        contact:
            name: NAME OF CONTACT
            url: URL TO CONTACT
            email: contact@mail.com
    responseCodes:
        ok.description: OK
        badRequest.description: Bad Request, invalid format of the request. See response message for more information
        notFound.description: Not found, the specified id does not exist
        unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information
    product-composite:
        get-composite-product:
            description: Returns a composite view of the specified product id
            notes: |
                # Normal response
                If the requested product id is found the method will return information regarding:
                1. Base product information
                1. Reviews
                1. Recommendations
                1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
                
                # Expected partial and error responses
                In the following cases, only a partial response be created (used to simplify testing of error conditions)
                
                ## Product id 113
                200 - Ok, but no recommendations will be returned
                
                ## Product id 213
                200 - Ok, but no reviews will be returned
                
                ## Non numerical product id
                400 - A **Bad Request** error will be returned
                
                ## Product id 13
                404 - A **Not Found** error will be returned
                
                ## Negative product ids
                422 - An **Unprocessable Entity** error will be returned
        create-composite-product:
            description: Creates a composite product
            notes: |
                # Normal response
                The composite product information posted to the API will be split up and stored as separate product-info, recommendation and review entities.
                
                # Expected error responses
                1. If a product with the same productId as specified in the posted information already exists,
                   an **422 - Unprocessable Entity** error with a "duplicate key" error message will be returned
        delete-composite-product:
            description: Deletes a product composite
            notes: |
                # Normal response
                Entities for product information, recommendations and reviews related to the specified productId will be deleted.
                The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
                
                This means that a delete request of a non-existing product will return **200 Ok**.

# Spring cloud stream
spring.cloud.stream:
    default.contentType: application/json
    bindings:
        products-out-0:
            destination: products
            producer:
                required-groups: auditGroup
        recommendations-out-0:
            destination: recommendations
            producer:
                required-groups: auditGroup
        reviews-out-0:
            destination: reviews
            producer:
                required-groups: auditGroup

# OAuth 2.0
spring.security.oauth2.resourceserver.jwt.issuer-uri: http://${app.auth-server}:9999

resilience4j.timelimiter.instances:
    product:
        timeoutDuration: 2s

resilience4j.retry.instances:
    product:
        maxAttempts: 3
        waitDuration: 1s
        retryExceptions:
            - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError

management.health.circuitbreakers.enabled: true

resilience4j.circuitbreaker.instances:
    product:
        allowHealthIndicatorToFail: false
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        ignore-exceptions:
            - com.rufusy.microservices.api.exceptions.BadRequestException
            - com.rufusy.microservices.api.exceptions.EventProcessingException
            - com.rufusy.microservices.api.exceptions.InvalidInputException
            - com.rufusy.microservices.api.exceptions.NotFoundException

logging:
    level:
        com.netflix.discovery: DEBUG
        com.netflix.eureka: DEBUG

---
spring.config.activate.on-profile: docker

server.port: 8080

---
spring.config.activate.on-profile: streaming_partitioned

spring.cloud.stream.bindings.products-out-0.producer:
    partition-key-expression: headers['partitionKey']
    partition-count: 2

spring.cloud.stream.bindings.recommendations-out-0.producer:
    partition-key-expression: headers['partitionKey']
    partition-count: 2

spring.cloud.stream.bindings.reviews-out-0.producer:
    partition-key-expression: headers['partitionKey']
    partition-count: 2